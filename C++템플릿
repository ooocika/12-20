class Vector{
std::string* data;
int capacity;
int length;

public :
Vector(int n = 1) :data(new std::string[n], capacity(n), length(0) {}

void push_back(std::string s){
  if(capacity <= length){
    std::string* temp = new std::string[capacity * 2];
    for(int i = 0; i < length; i++){ 
      temp[i] = data[i];
  }
    delete[] data;
    data = temp;
    capacity *= 2;
  }
  data[length] = s;
  length++;
  
}
std::string& operator[](int i){ return data[i];}

void remove(int x){
  for(int i = x+1; i < length; i++){
data[i - 1] = data[i];
    
  }
  length--;
}

int size(){ return length;}
~Vector(){
  if(data){
    delete[] data;
    
  }
}
};

//위 Vector 클래스의 경우 string 데이터 밖에 저장할 수 없습니다.

//예를 들어서 char 을 담는 Vector 의 경우
class Vector{
char* data;
int capacity;
int length;

public:

Vector(int n = 1) : data(new char[n], capacity(n), length(0){}

void push_back(char s){
  if(capacity <= length){
    char* temp = new char[capacity*2];
    for(int i = 0; i <length; i++){
      temp[i] = data[i];
    }
    delete[]data;
    data = temp;
    capacity *=2;
  
}
  data[length] = s;
  length++;
}

char operator[] (int i) {return data[i]; }

void remove(int x){
  for(int i = x+1; i < length; i++){
    data[i - 1] = data[i];
}
  length--;
}
int size(){return length;}

~Vector(){
  if(data){
    delete[] data;
  }
}
};

//char 을 보관하는 vector 와 string 을 보관하는 vector 의 코드는 단순히 string 부분이 char 로 바뀐 차이 밖에 없습니다

class Vector{
  T* data;
  int capacity;
int length;
public:
Vector(int n =1) : data(new T[n], capacity(n), length(0){}

void push_back(T s){
  if(capacity <= length){
    T* temp = new T[capacity * 2];
    for(int i = 0; i <length; i++){
      temp[i] = data[i];
    }
    delete[] data;
    data = temp;
    capacity *=2;
    
    }

  data[length] = s;
  length++;
}

T operator[](int x){
  for(int i = x+1; i < length; i++){
    data[i - 1] = data[i];
}
  length--;
}

int size(){return length;}

~Vector(){
  if(data){
    delete[]data;
  }
}
};

