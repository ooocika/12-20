class Stack {
struct Node {
Node* prev;
string s;
Node(Node* prev, string s) : prev(prev), s(s) {}
};
Node* current;
Node start;
public:
Stack();
// 최상단에 새로운 원소를 추가한다.
void push(string s);
// 최상단의 원소를 제거하고 반환한다.
string pop();
// 최상단의 원소를 반환한다. (제거 안함)
string peek();
// 스택이 비어있는지의 유무를 반환한다.


bool is_empty();
~Stack();
};

    //간단하게 Stack 을 구성하였습니다
    Stack::Stack() : start(NULL, "") { current = &start; }
    void Stack::push(string s) {
    Node* n = new Node(current, s);
    current = n;
    }
    string Stack::pop() {
    if (current == &start) return "";
    string s = current->s;
    Node* prev = current;
    current = current->prev;
    // Delete popped node
    delete prev;
    return s;
    }
    string Stack::peek() { return current->s; }
    bool Stack::is_empty() {
    if (current == &start) return true;
    return false;
    }
    Stack::~Stack() {
    while (current != &start) {
    Node* prev = current;
    current = current->prev;
    delete prev;
    }
    }

//
#ifdef UTILS_H
#define UTILS_H

#include <string>
using std::string

namespace MyExcel{
  class Vector{
  string* data;
  int capacity;
  int length;

  public:
  Vector(int n =1);

  void push_back(string s);


  string operator[](int i);

  void remove(int x);

  int size();

  ~Vector();
  
  };
  class Stack{
  struct Node{
  Node* prev;
  string s;

  Node(Node* prev, string s) : prev(prev), s(s) {}
  };
  Node* current;
  Node start;

  public:
  Stack();

  void push(string s);
  string pop();

  string peek();

  bool is_empty();

  ~Stack();
  };
  class NumStack{
  struct Node{
  Node* prev;
  double s;

  Node(Node* prev, double s) : prev(prev), s(s) {}
  };
  Node* current;
  Node start;

  public :
  NumStack();
  void push(double s);
  double pop();
  double peek();
  bool is_empty();

  ~NumStack();
  };
}
#endif

//마찬가지로 아래는 해당 헤더파일 내용을 구현한 utility.cpp 입니다.

#include "utils.h"
namespace MyExcel{
  Vector::Vector(int n) : data(new string[n], capacity(n) , length(0) {}
  void Vector::push_back(string s){
    if(capacity <= length){
      string* temp = new string[capacity * 2];
      for(int i =0; i < length; i++){
        temp[i] = data[i];
      }
      delete[] data;
      data = temp;
      capacity *= 2;
    }
    data[length] =s;
    length++;
    
    }
  string Vector::operator[](int i) {return data[i];}
  void Vector::remove(int x){
    for(itn i = x + i; i < length - 1; i++){
      data[i - 1] =data[i];
      
  }
    length--;
  }
  int Vector::size(){return length;}
  Vector::~Vector(){
    if(data){
      delete[]data;
    }
  }

  Stack::Stack() : start(NULL, "") { current = &start; }
  void Stack::push(string s){
    Node* n = new Node(current, s);
    current = n;
    
  }
  string Stack::pop(){
    if(current == &start) return "";

    string s = current->s;
    Node* prev = current;
    current = current->prev;

    delete prev;
    return s;
    
  }
  string Stack::peek() {return current->s;}
bool Stack::is_empty() {
  if(current == &start) return true;
    return false;
}
  Stack::~Stack(){
    while(current != &start){
      Node* prev = current;
      current = current-> prev;
      delete prev;
    }
  }
  NumStack::NumStack() : start(NULL, 0) { current = &start; }
  void NumStack::push(double s){
    Node* n = new Node(current, s);
    current = n;
  }
  double NumStack::pop(){
    if(current == &start) return 0;
      double s= current->s;
      Node* prev = current;
      current = current->prev;
   
    delete prev;
    return s;
  
  
  }

  double NumStack::peek() {return current->s;}
  bool NumStack::is_empty() {
    if(current == &start) return true;
    return false;
    
  }
  NumStack::~NumStack(){
    while(current != &start){
      Node* prev = current;
      current = current->prev;
      delete prev;
    }
  }
  
  }
