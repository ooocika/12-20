class Cell{
  protected:
int x,y;
Table* table;

string data;

public:
virtual string stringify();
virtual int to_numeric();

Cell(string data, int x, int y, Table* table);
};

//simple
Cell::Cell(string data, int x, int y, Table* table)
:data(data),x(x), y(y), table(table){}

string Cell::stringify() {return data;}
int Cell::to_numeric() {return 0;}

//Table define
class Table{
protected:
int max_row_size, max_col_size;

Cell*** data_table;

public:
  Table(int max_row_size, int max_col_size);

~Table();

void reg_cell(Cell* c, int row, int col);

int to_numeric(const string& s);

int to_numeric(int row, int col);

string stringify(const string& s);
string stringify(int row, int col);
virtual string print_table() =0;
};

//pointer 2차원 배열
Table::Table(int max_row_size, int max_col_size)
:max_row_size(max_row_size), max_col_size(max_col_size){
  data_table = new Cell**[max_col_size];
  for(int i =0; i < max_row_size; i++){
    data_table[i] = new Cell*[max_col_size];
    for(int j =0; j < max_col_size; j++){
      data_table[i][j] = NULL;
      
    }
  }
}

//동적 할당으로 Cell* 배열을 생성한 후에, Cell 객체가
//필요 할 때 마다 생성해서 배열의 원소들이 이를 가리킬 수 있게 하였습니다.

Table::~Table(){
    for(int i =0; i < max_row_size; i++){
      for(int j = 0; j < max_col_size; j++){
        if(data_table[i][j]) delete data_table[i][j];
      }
    }
  for(int i =0; i < max_row_size; i++){
    delete[] data_table[i];
  }
  delete[] data_table;
}
//
void Table::reg_cell(Cell *c, int row, int col){
  if(!(row < max_row_size && col < max_col_size))return;

  if(data_table[row][col]){
    delete data_table[row][col];
    
  }
  data_table[row][col] = c;
  
}

//
int Table::to_numeric(const string& s){
  int row = s[0] - 'A';
  int col = atoi(s.c_str()+1) - 1;

  if(row < max_row_size && col < max_col_size){
    if(data_table[row][col]){
      return data_table[row][col] ->to_numeric();
    }
  }
  return 0;
}
int Table::to_numeric(int row, int col){
  if(row < max_row_size && col < max_col_size && data_table[row][col]){
    return data_table[row][col]->to_numeric();
  }
  return 0;
}
string Table::stringiify(const string& s){
  int col = s[0] - 'A';
  int row = atoi(s.c_str()+1) - 1;

  if(row < max_row_size && col < max_col_size){
    if(data_table[row][col]){
      return data_table[row][col]->stringify();
    }
  }
  return 0;
}
string Table::stringify(int row, int col){
  if(row < max_row_size && col < max_col_size && data_table[row][col]){
    return data_table[row][col]->stringify();
    
  }
  return "";
}
std::ostream& operator<<(std::ostream& o, Table& table){
  o << table.print_table();
  return o;
}

//우리는 이 Table 클래스를 상속 받는 다른 클래스를 만들어서 이 함수를 구현해주어야만 합니다.


class TxtTable : public Table{
string repeat_char(int n, char c);

string col_num_to_str(int n);

public:
TxtTable(int row, int col);

string print_table();
};
//위는 Table 클래스를 상속 받는 TxtTable 클래스 입니다. 이 클래스는 Table 의 내용을 텍스트의 형태로 예쁘게 정리해서 출력해주는 역할을 하고 있습니다.


TxtTable::TxtTable(int row, int col) : Table(row, col){}

string TxtTable::print_table(){
  string total_table;

  int* col_max_wide = new int[max_col_size];
  for(int i =0; i < max_col_size; i++){
    unsigned int max_wide = 2;
    for(int j =0; j < max_row_size; j++){
      if(data_table[j][i] && 
        data_table[j][i]->stringify().length() > max_wide){
        max_wide = data_table[j][i]->stringify().length();
      }
}
    col_max_wide[i] = max_wide;
  }
  total_table +="  ";
  int total_wide = 4;
  for(int i =0; i < max_col_size; i++){
    if(col_max_wide[i]){
      int max_len = max(2, col_max_wide[i]);

      total_table += " | " + col_num_to_str(i);
      total_table += repeat_char(max_len - col_num_to_str(i).length(), ' ');

      total_wide +=(max_len + 3);
    }
    
    }

  total_table +="\n";
  for(int i = 0; i < max_row_size; i++){
    total_table += repeat_char(total_w, '-');
    total_table += "\n" + to_string(i+1);
    total_table += repeat_char(4 - to_string(i + 1).length(), ' ');

    for(int j =0; j < max_col_size; j++){
      if(col_max_wide[j]){
        int max_len = max(2, col_max_wide[j]);

        string s = "";
        if(data_table[i][j]){
          s = data_table[i][j]->stringify();
          
        }
        total_table +="|" + s;
        total_table += repeat_char(max_len - s.length(), ' ');
      }
    }
    total_table += "\n";
  }
  return total_table;
}
string TxtTable::repeat_char(int n, char c){
  string s= "";
  for(int i = 0; i < n; i++) s.push_back(c);

  return s;
  
}

string TxtTable::col_num_to_str(int n){
    string s = "";
  if(n < 26){
    s.push_back('A' + n);
  }else{
    char first = 'A' + n / 26 - 1;
    char second = 'A' + n % 26;

    s.push_back(first);
    s.push_back(second);
  }
  return s;
  
  }

//생략된 부분

int main(){
  MyExcel::TxtTable table(5,5);
  std::ofstream out("test.txt");

  table.reg_cell(new Cell("Hello~", 0, 0, &table), 0, 0);
  table.reg_cell(new Cell("C++", 0, 1, &table), 0, 1);

  table.reg_cell(new Cell("Programming", 1, 1, &table), 1, 1);
  std::cout << std::endl << table;
  out << table;
}

//CSV 파일 형태와 HTML 형태로 데이터를 표현해주는 두 개의 클래스들을 더 만들었습니다

class HTMLTable : public Table{
  public:
  HTMLTable(int row, int col);

string print_table();


};

class CSVTable : public Table{
public:
CSVTable(int row, int col);
string print_table();
};
//
// 생략
int main() {
MyExcel::CSVTable table(5, 5);
std::ofstream out("test.csv");
table.reg_cell(new Cell("Hello~", 0, 0, &table), 0, 0);
table.reg_cell(new Cell("C++", 0, 1, &table), 0, 1);
table.reg_cell(new Cell("Programming", 1, 1, &table), 1, 1);
out << table;
MyExcel::HtmlTable table2(5, 5);
std::ofstream out2("test.html");
table2.reg_cell(new Cell("Hello~", 0, 0, &table), 0, 0);
table2.reg_cell(new Cell("C++", 0, 1, &table), 0, 1);
table2.reg_cell(new Cell("Programming", 1, 1, &table), 1, 1);
out2 << table2;
}

//구현 내용은 다음과 같습니다.
HTMLTable:HTMLTable(int row, int col) : Table(row, col) {}

string HtmlTable::print_table() {
  string s = "<table border=\"1\" cellpadding = '10'>";
  for(int i =0; i <max_row_size; i++){
    s += "<tr>";
    for(int j = 0; j < max_col_size; j++){
      s += "<td>";
      if(data_table[i][j]) s += data_table[i][j]->stringify();
      s += "</td>";
    }
    s += "</tr>";
  }
  s += "</table>";
  return s;
} CSVTable:CSVTable(int row, int col) : Table(row, col) {}
string CSVTable::print_table(){
  string s = "";
  for(int i = 0; i < max_row_size; i++){
    for(int j = 0; j < max_col_size; j++){
      if(j >= 1) s += ",";

      string temp;
      if(data_table[i][j]) temp = data_table[i][j]->stringify();

      for(int k =0; k <temp.length(); k++){
        if(temp[k] == '"'){
          temp.insert(k,1,'"');

          k++;
        }
      }
      temp = '"' + temp + '"';
      s += temp;
  }
    s += '\n';
}
  return s;
}
