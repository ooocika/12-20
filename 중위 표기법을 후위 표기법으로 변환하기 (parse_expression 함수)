void ExprCell::parse_expression(){
  Stack stack;

  data.insert(0, "(");
  data.push_back(")");

  for(int i = 0; i < data.length(); i++){
    if(isalpha(data[i])){
      exp_vec.push_back(data.substr(i, 2));
      i++;
      
  }else if(isdigit(data[i])){
      exp_vec.push_back(data.substr(i, 1));

      
}else if(data[i] == '('){ || data[i] == '[' || data[i] == '{'){
      stack.push(data.substr(i, 1));
    }else if(data[i] == ')' ||data[i] == ']' || data[i] == '}'){
      string t = stack.pop();
      while(t != "(" && t != "[" && t != "{"){
        exp_vec.push_back(t);
        t = stack.pop();
      }
    }else if (data[i] == '+' || data[i] == '-' || data[i] == '*' || data[i] == '/'){
      while(!stack.is_empty() &&
        precedence(stack.peak()[0]) >= precedence(data[i])){
        exp_vec.push_back(stack.pop());
        
        }
      stack.push(data.substr(i, 1));
    }
  }
}


int main(){
  MyExcel::TxtTable table(5,5);
  table.reg_cell(new NumberCell(2,1,1, &table), 1, 1);
  table.ref_cell(new NumberCell(3,1,2, &table), 1, 2);

  table.reg_cell(new NumberCell(4,2,1, &table), 1, 3);
  table.reg_cell(new NumberCell(5,2,2, &table), 2, 2);
  table.reg_cell(new ExprCell("B2+B3*(C2+C3-2)", 3, 3, &table), 3, 2);
  table.reg_cell(new StringCell("B2+B3*(C2+C3-2) = ", 3, 2, &table), 3, 1);

  std::cout << table;
}
